Convert to GTFS

# todo: better data source / convert to trip+frequences? Losing the mode here, TUBE, WALK, etc
INSERT INTO gtfs.transfers
    SELECT null, origin, destination, 2, duration * 60
    FROM fixed_link;

# note: this is interchange time
INSERT INTO gtfs.transfers
    SELECT null, crs_code, crs_code, 2, minimum_change_time * 60
    FROM physical_station;

# todo maybe convert physical_station eastings/northings to long/lat. Probably easier to source data elsewhere.
INSERT INTO gtfs.stops
    SELECT null, crs_code, tiploc_code, description, description, null, null, null, null, 0, null, "Europe/London", 0
    FROM tiploc WHERE crs_code IS NOT NULL AND description IS NOT NULL;


FOREACH schedule
    # insert the calendar dates
    INSERT INTO gtfs.calendar
        SELECT null, id, monday, tuesday, wednesday, thursday, friday, saturday, sunday, runs_from, runs_to FROM schedule WHERE id = :id;

    # insert the trip
    INSERT INTO gtfs.trips
        SELECT null, null, schedule.id, schedule.id, train_uid, e.retail_train_id, null, null, null, null, null FROM schedule
        LEFT JOIN schedule_extra e ON e.schedule = schedule.id;

    # find any other trip with the same train_uid where this services dates are inside the other services dates
    SELECT * FROM calendar JOIN trips USING(service_id) WHERE trip_headsign = schedule.train_uid AND runs_from < schedule.runs_from AND runs_to > schedule.runs_to
        # chop the runs_to of the original schedule to be the runs_from of this schedule
        # insert another calendar date for the service that runs_from the runs_to date of this schedule and runs_to the original runs_to

    # note: rather than doing several chops it might be worth detecting small overlays and adding them as exceptions
    # for an example, run:
    #   select id, train_uid, runs_from, runs_to, stp_indicator, train_identity, train_category, headcode from schedule where train_uid = "Y03228" order by id;

# note: I think we only need to add the excludes
FOREACH BANK HOLIDAY
    INSERT INTO calendar_dates SELECT id, :date, 2 FROM schedule WHERE bank_holiday_running = 0 AND :date BETWEEN runs_from AND runs_to

# todo: stop_sequence, gtfs says to ensure the first and last stops have both departure and arrival time???
-- WARNINGS HERE
INSERT INTO gtfs.stop_times
    SELECT null, schedule.id, public_arrival_time, public_departure_time, crs_code, ???, platform, IF(ISNULL(public_departure_time), 1, 0), IF(ISNULL(public_arrival_time), 1, 0), null, 1
    FROM stop_time
    JOIN schedule ON stop_time.schedule = schedule.id
    JOIN tiploc t ON t.tiploc_code = stop_time.location
    WHERE t.crs_code IS NOT NULL;


# todo: z schedule, z stop, no overlays there thankfully
INSERT INTO gtfs.calendar
    SELECT null, id, monday, tuesday, wednesday, thursday, friday, saturday, sunday, runs_from, runs_to FROM z_schedule;

INSERT INTO gtfs.trips
    SELECT null, null, id, id, train_uid, null, null, null, null, null, null FROM z_schedule

INSERT INTO gtfs.stop_times
    SELECT null, z_schedule.id, public_arrival_time, public_departure_time, location, ???, platform, IF(ISNULL(public_departure_time), 1, 0), IF(ISNULL(public_arrival_time), 1, 0), null, 1
    FROM z_stop_time
    JOIN z_schedule ON z_stop_time.z_schedule = z_schedule.id;


# todo: associations (splits and joins)

# todo: convert time - is this really a good idea?

# how to do routes? get the toc in from schedule_extra

# how was service_id re-used between associations
