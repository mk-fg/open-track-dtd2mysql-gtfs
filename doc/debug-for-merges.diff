diff --git a/mysql-dtd-to-gtfs.py b/mysql-dtd-to-gtfs.py
index dadf238..f5c5ac8 100755
--- a/mysql-dtd-to-gtfs.py
+++ b/mysql-dtd-to-gtfs.py
@@ -529,7 +529,10 @@ class DTDtoGTFS:
 				if s.stp_indicator in 'ONC':
 					for trip_id in train_trip_ids:
 						diff_any, spans = False, trip_svc_timespans[trip_id].copy()
+						print(f'------ diff from timespans ({len(spans)}) for trip {trip_id}')
+						print('  cutting-out:', svc_span)
 						for n, span in enumerate(spans):
+							print('  from:', span)
 							diff = span.difference(svc_span)
 							if not diff.t: spans[n] = [span]
 							else:
@@ -537,6 +540,8 @@ class DTDtoGTFS:
 								self.stats[f'svc-diff-op'] += 1
 								self.stats[f'svc-diff-{diff.t.name}'] += 1
 								spans[n] = diff.spans
+								print(f'    cut-type: {diff.t.name}')
+								for span in diff.spans: print('   ', span)
 						if diff_any: trip_svc_timespans[trip_id] = list(it.chain.from_iterable(spans))
 					if s.stp_indicator == 'C': continue # have no associated trip, unlike stp=O/N
 
@@ -583,14 +588,22 @@ class DTDtoGTFS:
 
 				### Trip deduplication
 
+				print(f'--- trip from schedule {s.id} {s.stp_indicator} {s.runs_from} {s.runs_to}')
+				print(f'  service: {svc_span}')
+				print(
+					'  stops[{:>2d}]:'.format(len(trip_stops)),
+					' '.join(st[0].crs_code for st in trip_stops) )
+
 				trip_hash = hash(tuple(trip_hash))
 				if trip_hash in trip_merge_idx:
 					self.stats['trip-dedup'] += 1
 					trip_id = trip_merge_idx[trip_hash]
+					print('  duplicate for:', trip_id)
 					trip_svc_timespans[trip_id].append(svc_span)
 
 				else:
 					trip_id = trip_merge_idx[trip_hash] = len(trip_merge_idx) + 1
+					print('  added as:', trip_id)
 
 					## Route is created in an ad-hoc fashion here currently, just as a placeholder
 					# These are also deduplicated by start/end stops via route_merge_idx.
@@ -632,8 +645,16 @@ class DTDtoGTFS:
 		trip_svc_ids = dict() # {trip_id: svc_id_list}
 
 		self.log.debug('Merging service timespans for {} gtfs.trips...', len(trip_svc_timespans))
+
+		print('-'*20, 'merge')
+
 		for trip_id, spans in trip_svc_timespans.items():
 			spans = spans_pre = trip_svc_ids[trip_id] = spans.copy()
+			print(f'+++ trip {trip_id}')
+			if len(spans) == 1: print(f'  span:', spans[0])
+			else:
+				print(f'  spans:')
+				for span in sorted(spans): print('    ', span)
 
 			### Merge timespans where possible
 			if len(spans) > 1:
@@ -645,12 +666,20 @@ class DTDtoGTFS:
 						merge = s1.merge(s2)
 						if merge.t:
 							spans.difference_update([s1, s2])
+							s1, s2 = sorted([s1, s2])
+							print('  merge:')
+							print(f'    {s1} + {s2}')
+							print(f'    = {merge.span} [{merge.t.name}]')
 							spans.add(merge.span)
 							self.stats['svc-merge-op'] += 1
 							self.stats[f'svc-merge-op-{merge.t.name}'] += 1
 					if len(spans) == spans_before: break
 				spans = trip_svc_ids[trip_id] = list(spans)
-				if len(spans) != len(spans_pre): self.stats['svc-merge'] += 1
+				if len(spans) != len(spans_pre):
+					self.stats['svc-merge'] += 1
+					trip, = self.qb(f'SELECT * FROM {self.db_gtfs}.trips WHERE trip_id = %s', trip_id)
+					print('  trip-info:', trip.trip_headsign, trip.trip_short_name)
+					print('  merged-to:', sorted(spans))
 
 			### Store into gtfs.calendar/gtfs.calendar_dates, assigning service_id to each
 			for n, span in enumerate(spans):
